const req = require('express/lib/request');
const axios = require('axios').default;

const baseURL = 'https://sandbox.enauli.com/v1';

async function loginUser(req) {
    let token = await generateEnauliToken();

    if (token.status == 200) {
        let config = {
            headers: {
                'Authorization': "Bearer " + token.message
            }
        }

        let data = {
            'emailOrPhoneNumberOrId': req.body.phone || req.body.emailOrPhoneNumberOrId,
            'pin': req.body.pwd || req.body.pin
        }

        console.log(data);

        let user = await axios.post(baseURL + '/user/login', data, config);

        return { status: user.status, message: user.data.data[0] };
    } else {
        return { status: token.status, message: token.message };
    }
}

async function changePassword(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;

        let user = await axios.post(baseURL + '/user/changePassword', data, config);

        console.log(user.data);

        return { status: user.status, message: user.data.data[0] };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

function resetPassword() { }

async function generateEnauliToken() {
    try {
        let data = {
            "apiKey": "3ce56b08-a3ab-4f71-8124-8f577c80b78e",
            "appSecret": "1F7C8BC2357640E182BAAAC5212DE545"
        }

        let newSacco = await axios.post(baseURL + '/auth/token', data);

        console.log(newSacco.data);

        return { status: 200, message: newSacco.data.data[0].accessToken };
    } catch (error) {
        console.log({ 500: error?.message || error?.response?.statusText });

        return { status: 500, message: error?.message || error?.response?.statusText };
    }
}

async function createSacco(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;

        console.log(data);

        let newSacco = await axios.post(baseURL + '/sacco', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0].saccoId };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function searchSacco(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let id = req.params.id;

        console.log(id);

        let newSacco = await axios.get(baseURL + '/sacco/' + id, config);

        console.log(newSacco.data.data[0]);

        return { status: newSacco.status, message: newSacco.data.data[0] };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function editSacco(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newSacco = await axios.put(baseURL + '/sacco', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0].saccoId };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function deactivateSacco(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newSacco = await axios.put(baseURL + '/sacco/status', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0].saccoId };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function addOfficial(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newOfficial = await axios.post(baseURL + '/sacco/addOfficial', data, config);

        console.log(newOfficial.data.data[0]);

        return { status: newOfficial.status, message: newOfficial.data.data[0].saccoOfficialId };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function editOfficial(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newSacco = await axios.put(baseURL + '/sacco/official', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0] };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function updateOfficialStatus(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newSacco = await axios.put(baseURL + '/sacco/official/status', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0] };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function getOfficials(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let newSacco = await axios.get(baseURL + '/sacco/official/list', config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

function addStation() { }
function editStation() { }
function chargeStation() { }
function editCharge() { }
function getBalance() { }

async function addVehicle(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;

        let newVehicle = await axios.post(baseURL + '/vehicle', data, config);

        console.log(newVehicle.data);

        return { status: newVehicle.status, message: newVehicle.data.data[0].vehicleId };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

function editVehicle() { }
function addOperator() { }
function editOperator() { }
function getVehiclesInSacco() { }

exports.login_user = async (req, res) => {
    let result = await loginUser(req);
    console.log(result);

    if (result.status == 200) {
        res.status(result.status).send(result.message);
    } else {
        res.status(result.status).end();   
    }
}

exports.change_password = async (req, res) => {
    let result = await changePassword(req);

    res.status(result.status).send(result.message);
}

exports.reset_password = (req, res) => {
    resetPassword();
}

exports.token = async (req, res) => {
    let result = await generateEnauliToken();

    res.status(result.status).send(result.message);
}

exports.create_sacco = async (req, res) => {
    let result = await createSacco(req);

    res.status(result.status).send(result.message);
}

exports.search_sacco = async (req, res) => {
    let result = await searchSacco(req);

    res.status(result.status).send(result.message);
}

exports.edit_sacco = async (req, res) => {
    let result = await editSacco(req);

    res.status(result.status).send(result.message);
}

exports.deactivate_sacco = async (req, res) => {
    let result = await deactivateSacco(req);

    res.status(result.status).send(result.message);
}

exports.add_official = async (req, res) => {
    let result = await addOfficial(req);

    res.status(result.status).send(result.message);
}

exports.edit_official = async (req, res) => {
    let result = await editOfficial(req);

    res.status(result.status).send(result.message);
}

exports.update_official_status = async (req, res) => {
    let result = await updateOfficialStatus(req);

    res.status(result.status).send(result.message);
}

exports.get_officials = async (req, res) => {
    let result = await getOfficials(req);

    res.status(result.status).send(result.message);
}

exports.add_station = (req, res) => {
    addStation();
}

exports.edit_station = (req, res) => {
    editStation();
}

exports.charge_station = (req, res) => {
    chargeStation();
}

exports.edit_charge = (req, res) => {
    editCharge();
}

exports.get_balance = (req, res) => {
    getBalance();
}

exports.add_vehicle = async (req, res) => {
    let result = await addVehicle(req);

    res.status(result.status).send(result.message);
}

exports.edit_vehicle = (req, res) => {
    editVehicle();
}

exports.add_operator = (req, res) => {
    addOperator();
}

exports.edit_operator = (req, res) => {
    editOperator();
}

exports.get_sacco_vehicles = (req, res) => {
    getVehiclesInSacco();
}


exports.test = (req, res) => {
    console.log(req.headers.authorization);

    res.status(200).send('Test route working!!');
}