const req = require('express/lib/request');

const axios = require('axios').default;

const baseURL = 'https://sandbox.enauli.com/v1';

function login() { }
function changePassword() { }
function resetPassword() { }

async function generateEnauliToken() {
    try {
        let data = {
            "apiKey": "3ce56b08-a3ab-4f71-8124-8f577c80b78e",
            "appSecret": "1F7C8BC2357640E182BAAAC5212DE545"
        }

        let newSacco = await axios.post(baseURL + '/auth/token', data);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0].accessToken };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function createSacco(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newSacco = await axios.post(baseURL + '/sacco', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0].saccoId };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function editSacco(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newSacco = await axios.put(baseURL + '/sacco', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0].saccoId };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function deactivateSacco(req) {
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newSacco = await axios.put(baseURL + '/sacco/status', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0].saccoId };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

async function addOfficial(req) { 
    try {
        let config = {
            headers: {
                'Authorization': "Bearer " + req.headers?.authorization.split(' ')[1]
            }
        }

        let data = req.body;
        let newSacco = await axios.put(baseURL + '/sacco/status', data, config);

        console.log(newSacco.data);

        return { status: newSacco.status, message: newSacco.data.data[0] };
    } catch (error) {
        console.log({ [error?.response?.data?.status?.code]: error?.response?.data?.status?.message || error?.response?.statusText });

        return { status: error?.response?.status, message: error?.response?.data?.status?.message || error?.response?.statusText };
    }
}

function editOfficial() { }
function getOfficials() { }
function addStation() { }
function editStation() { }
function chargeStation() { }
function editCharge() { }
function getBalance() { }
function addVehicle() { }
function editVehicle() { }
function addOperator() { }
function editOperator() { }
function getVehiclesInSacco() { }

exports.login = (req, res) => {
    login();
}

exports.change_password = (req, res) => {
    changePassword();
}

exports.reset_password = (req, res) => {
    resetPassword();
}

exports.token = async (req, res) => {
    let result = await generateEnauliToken();

    res.status(result.status).send(result.message);
}


exports.create_sacco = async (req, res) => {
    let result = await createSacco(req);

    res.status(result.status).send(result.message);
}

exports.edit_sacco = async (req, res) => {
    let result = await editSacco(req);

    res.status(result.status).send(result.message);
}

exports.deactivate_sacco = async (req, res) => {
    let result = await deactivateSacco(req);

    res.status(result.status).send(result.message);
}

exports.add_official = async (req, res) => {
    let result = await addOfficial(req);

    res.status(result.status).send(result.message);
}

exports.edit_official = (req, res) => {
    editOfficial();
}

exports.get_officials = (req, res) => {
    getOfficials();
}

exports.add_station = (req, res) => {
    addStation();
}

exports.edit_station = (req, res) => {
    editStation();
}

exports.charge_station = (req, res) => {
    chargeStation();
}

exports.edit_charge = (req, res) => {
    editCharge();
}

exports.get_balance = (req, res) => {
    getBalance();
}

exports.add_vehicle = (req, res) => {
    addVehicle();
}

exports.edit_vehicle = (req, res) => {
    editVehicle();
}

exports.add_operator = (req, res) => {
    addOperator();
}

exports.edit_operator = (req, res) => {
    editOperator();
}

exports.get_sacco_vehicles = (req, res) => {
    getVehiclesInSacco();
}


exports.test = (req, res) => {
    console.log(req.headers.authorization);

    ; res.status(200).send('Test route working!!');
}